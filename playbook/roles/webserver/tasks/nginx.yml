- name: Check if NGINX is installed
  command: nginx -v
  register: nginx_installed
  failed_when: false
  changed_when: false

- name: "Install NGINX {{ nginx_version }} (RHEL/CentOS >= 8)"
  dnf:
    name: "nginx-{{ nginx_version }}"
    state: present
    update_cache: true
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int >= 8 and nginx_installed.rc != 0

- name: "Install NGINX {{ nginx_version }} (Debian/Ubuntu)"
  apt:
    name: "nginx={{ nginx_version }}"
    state: present
    update_cache: true
  when: ansible_os_family == "Debian" and nginx_installed.rc != 0

- name: "Install NGINX {{ nginx_version }} (Arch Linux)"
  pacman:
    name: "nginx={{ nginx_version }}"
    state: present
    update_cache: true
  when: ansible_os_family == "Archlinux" and nginx_installed.rc != 0

- name: Copy nginx config file
  template:
    src: nginx/nginx.conf.j2
    dest: "{{ nginx_dir }}/nginx.conf"

- name: Copy nginx index html
  template:
    src: nginx/index.html.j2
    dest: "/usr/share/nginx/html/index.html"

- name: Copy robots.txt
  template:
    src: nginx/robots.txt.j2
    dest: "/usr/share/nginx/html/robots.txt"

- name: Remove default nginx site if it exists
  file:
    path: "{{ nginx_dir }}/sites-enabled/default"
    state: absent
  become: true

- name: Remove sites-available and sites-enabled directories
  file:
    path: "{{ nginx_dir }}/{{ item }}"
    state: absent
  become: true
  with_items:
    - "sites-available"
    - "sites-enabled"

- name: Create NGINX directories
  file:
    path: "{{ item }}"
    state: directory
  become: true
  with_items:
    - "{{ nginx_log_dir }}"
    - "{{ nginx_dir }}/certs"
    - "{{ nginx_dir }}/sites-available"
    - "{{ nginx_dir }}/sites-enabled"

- name: Copy all site configuration files
  template:
    src: "templates/sites-available/{{ item }}.conf.j2"
    dest: "{{ nginx_dir }}/sites-available/{{ item }}.conf"
    mode: '0644'
  loop: "{{ sites_enabled }}"

- name: Enable specified sites
  file:
    src: "{{ nginx_dir }}/sites-available/{{ item }}.conf"
    dest: "{{ nginx_dir }}/sites-enabled/{{ item }}.conf"
    state: link
    force: yes
  loop: "{{ sites_enabled }}"

- name: Open necessary firewall ports
  firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
  become: true
  with_items:
    - "{{ nginx_port }}/tcp"
    - "{{ nginx_sslport }}/tcp"

- name: Copy nginx configuration files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  become: true
  with_items:
    - src: "{{ role_path }}/files/ckan-local.crt"
      dest: "{{ nginx_dir }}/certs/"
    - src: "{{ role_path }}/files/ckan-local.key"
      dest: "{{ nginx_dir }}/certs/"
  notify: restart nginx

- name: Check if SELinux is installed
  command: sestatus
  register: selinux_status
  ignore_errors: true

- name: Allow httpd to make network connections
  command: setsebool -P httpd_can_network_connect true
  when: enable_httpd_network_connect and selinux_status.rc == 0
  become: true
  notify: 
    - restart nginx
